import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { copyFileSync, existsSync, mkdirSync } from "fs";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");
const PLUGIN_PATH = "D:\\WS2\\plug-in\\.obsidian\\plugins\\card";

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2020",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: prod ? "build/main.js" : "main.js",
	minify: prod,
	platform: "node",
	jsx: "automatic",
	jsxImportSource: "preact",
	alias: {
		"react": "preact/compat",
		"react-dom": "preact/compat"
	}
});

// ÎπåÎìú ÌõÑ ÌååÏùº Î≥µÏÇ¨ Ìï®Ïàò
function copyFilesToBuild() {
	// build Ìè¥Îçî ÏÉùÏÑ±
	if (!existsSync("build")) {
		mkdirSync("build");
	}

	// manifest.json Î≥µÏÇ¨
	if (existsSync("manifest.json")) {
		copyFileSync("manifest.json", "build/manifest.json");
		console.log("‚úÖ manifest.json copied to build/");
	}

	// styles.css Î≥µÏÇ¨
	if (existsSync("styles.css")) {
		copyFileSync("styles.css", "build/styles.css");
		console.log("‚úÖ styles.css copied to build/");
	}
}

// ÌîåÎü¨Í∑∏Ïù∏ Ìè¥ÎçîÎ°ú ÌååÏùº Î≥µÏÇ¨ Ìï®Ïàò
function copyToPluginFolder() {
	// ÌîåÎü¨Í∑∏Ïù∏ Ìè¥ÎçîÍ∞Ä ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
	if (!existsSync(PLUGIN_PATH)) {
		mkdirSync(PLUGIN_PATH, { recursive: true });
		console.log(`üìÅ Created plugin folder: ${PLUGIN_PATH}`);
	}

	// build Ìè¥ÎçîÏùò Î™®Îì† ÌååÏùºÏùÑ ÌîåÎü¨Í∑∏Ïù∏ Ìè¥ÎçîÎ°ú Î≥µÏÇ¨
	const filesToCopy = ["main.js", "manifest.json", "styles.css"];
	
	filesToCopy.forEach(file => {
		const sourcePath = `build/${file}`;
		const targetPath = `${PLUGIN_PATH}/${file}`;
		
		if (existsSync(sourcePath)) {
			copyFileSync(sourcePath, targetPath);
			console.log(`‚úÖ ${file} copied to plugin folder`);
		} else {
			console.log(`‚ö†Ô∏è  ${file} not found in build folder`);
		}
	});
	
	console.log(`üéâ All files copied to: ${PLUGIN_PATH}`);
}

if (prod) {
	await context.rebuild();
	copyFilesToBuild();
	copyToPluginFolder();
	console.log("üéâ Build completed! Files generated in build/ folder and copied to plugin folder:");
	console.log("   - main.js");
	console.log("   - manifest.json");
	console.log("   - styles.css");
	process.exit(0);
} else {
	await context.watch();
}
